// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using inventory8.DatabaseContext;

#nullable disable

namespace inventory8.Migrations
{
    [DbContext(typeof(InventoryContext))]
    partial class InventoryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("inventory8.Entities.Attendance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Datetime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("HasEntered")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Attendances");
                });

            modelBuilder.Entity("inventory8.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("AcquisitionPrice")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("LastAudit")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("LowStockThreshold")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PackagingUnit")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("longtext");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Stats")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int");

                    b.Property<bool>("SubscribeToInventory")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SupplierId");

                    b.ToTable("products");
                });

            modelBuilder.Entity("inventory8.Entities.ProductTag", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("product_tag");
                });

            modelBuilder.Entity("inventory8.Entities.Request", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("HandledBy")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(65,30)");

                    b.Property<bool>("Received")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("HandledBy");

                    b.ToTable("request");
                });

            modelBuilder.Entity("inventory8.Entities.RequestDetail", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "RequestId");

                    b.HasIndex("RequestId");

                    b.HasIndex("SupplierId");

                    b.ToTable("request_detail");
                });

            modelBuilder.Entity("inventory8.Entities.RequestTag", b =>
                {
                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.HasKey("TagId", "RequestId");

                    b.HasIndex("RequestId");

                    b.ToTable("request_tag");
                });

            modelBuilder.Entity("inventory8.Entities.StockAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Datetime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("HandledBy")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("HandledBy");

                    b.ToTable("stock_audit");
                });

            modelBuilder.Entity("inventory8.Entities.StockAuditProduct", b =>
                {
                    b.Property<int>("StockAuditId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("StockAuditId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("stock_audit_products");
                });

            modelBuilder.Entity("inventory8.Entities.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UniqueIdentifier")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("suppliers");
                });

            modelBuilder.Entity("inventory8.Entities.SupplierTag", b =>
                {
                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.HasKey("TagId", "SupplierId");

                    b.HasIndex("SupplierId");

                    b.ToTable("SupplierTags");
                });

            modelBuilder.Entity("inventory8.Entities.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("tags");
                });

            modelBuilder.Entity("inventory8.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Permissions")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Settings")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UniqueIdentifier")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("inventory8.Entities.Attendance", b =>
                {
                    b.HasOne("inventory8.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("inventory8.Entities.Product", b =>
                {
                    b.HasOne("inventory8.Entities.Supplier", "Supplier")
                        .WithMany("Products")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("inventory8.Entities.ProductTag", b =>
                {
                    b.HasOne("inventory8.Entities.Product", "Product")
                        .WithMany("ProductTags")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("inventory8.Entities.Tag", "Tag")
                        .WithMany("ProductTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("inventory8.Entities.Request", b =>
                {
                    b.HasOne("inventory8.Entities.User", "HandledByUser")
                        .WithMany()
                        .HasForeignKey("HandledBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("HandledByUser");
                });

            modelBuilder.Entity("inventory8.Entities.RequestDetail", b =>
                {
                    b.HasOne("inventory8.Entities.Product", "Product")
                        .WithMany("RequestDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("inventory8.Entities.Request", "Request")
                        .WithMany("RequestDetails")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("inventory8.Entities.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Request");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("inventory8.Entities.RequestTag", b =>
                {
                    b.HasOne("inventory8.Entities.Request", "Request")
                        .WithMany("RequestTags")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("inventory8.Entities.Tag", "Tag")
                        .WithMany("RequestTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Request");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("inventory8.Entities.StockAudit", b =>
                {
                    b.HasOne("inventory8.Entities.User", "HandledByUser")
                        .WithMany()
                        .HasForeignKey("HandledBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("HandledByUser");
                });

            modelBuilder.Entity("inventory8.Entities.StockAuditProduct", b =>
                {
                    b.HasOne("inventory8.Entities.Product", "Product")
                        .WithMany("StockAuditProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("inventory8.Entities.StockAudit", "StockAudit")
                        .WithMany("StockAuditProducts")
                        .HasForeignKey("StockAuditId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("StockAudit");
                });

            modelBuilder.Entity("inventory8.Entities.SupplierTag", b =>
                {
                    b.HasOne("inventory8.Entities.Supplier", "Supplier")
                        .WithMany("SupplierTags")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("inventory8.Entities.Tag", "Tag")
                        .WithMany("SupplierTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Supplier");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("inventory8.Entities.Product", b =>
                {
                    b.Navigation("ProductTags");

                    b.Navigation("RequestDetails");

                    b.Navigation("StockAuditProducts");
                });

            modelBuilder.Entity("inventory8.Entities.Request", b =>
                {
                    b.Navigation("RequestDetails");

                    b.Navigation("RequestTags");
                });

            modelBuilder.Entity("inventory8.Entities.StockAudit", b =>
                {
                    b.Navigation("StockAuditProducts");
                });

            modelBuilder.Entity("inventory8.Entities.Supplier", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("SupplierTags");
                });

            modelBuilder.Entity("inventory8.Entities.Tag", b =>
                {
                    b.Navigation("ProductTags");

                    b.Navigation("RequestTags");

                    b.Navigation("SupplierTags");
                });
#pragma warning restore 612, 618
        }
    }
}
